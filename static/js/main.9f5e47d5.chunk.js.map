{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","web3","Web3","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blockNumber","forkDate","finalBlockNumber","days","hours","minutes","_this2","timerID","setInterval","updateInfura","_this3","eth","getBlockNumber","then","resp","timeToFork","forkDuration","Moment","duration","currentTime","setState","add","format","react_default","a","createElement","className","src","logo","alt","id","toLocaleString","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6XCMpCC,UAAO,IAAIC,IAAK,8BA+DLC,cAzDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,YAAa,EACbC,SAAU,aACVC,iBAAkB,MAClBC,KAAM,IACNC,MAAO,IACPC,QAAS,KARCb,mFAYM,IAAAc,EAAAX,KAClBA,KAAKY,QAAUC,YACX,kBAAMF,EAAKG,gBACX,4CAIS,IAAAC,EAAAf,KACX,OAAON,EAAKsB,IAAIC,iBACXC,KAAK,SAACC,GACL,IACIC,EAA4B,IADbL,EAAKX,MAAMG,iBAAmBY,GAE7CE,EAAe,IAAIC,IAAOC,SAASH,EAAY,KAC/CI,EAAe,IAAIF,IACvBP,EAAKU,SAAS,CACZpB,YAAac,EACbb,SAAakB,EAAYE,IAAIN,EAAY,WAAWO,OAAO,cAC3DnB,KAAaa,EAAab,OAC1BC,MAAaY,EAAaZ,QAC1BC,QAAaW,EAAaX,+CAMpC,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qCAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAwBH,EAAAC,EAAAC,cAAA,QAAMK,GAAG,eAAeJ,UAAU,yDAAyD/B,KAAKI,MAAMC,YAAY+B,kBAAxJ,MAAmLR,EAAAC,EAAAC,cAAA,QAAMK,GAAG,YAAYJ,UAAU,2BAA2B/B,KAAKI,MAAMG,iBAAiB6B,kBAAwBR,EAAAC,EAAAC,cAAA,mCACjSF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qCAAd,IACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCAAgC/B,KAAKI,MAAMI,MAAYoB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,UACvEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCAAgC/B,KAAKI,MAAMK,OAAamB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,WACxEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCAAgC/B,KAAKI,MAAMM,SAAekB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,aAE9EH,EAAAC,EAAAC,cAAA,eAAO9B,KAAKI,MAAME,oBAnDZ+B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.9f5e47d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f2366047.png\";","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport Web3 from 'web3';\nimport Moment from 'moment';\nimport './App.css';\n\nlet web3 = new Web3('https://mainnet.infura.io');\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      blockNumber: 0,\n      forkDate: '2019-01-17',\n      finalBlockNumber: 7080000,\n      days: 'x',\n      hours: 'x',\n      minutes: 'x'\n    }\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n        () => this.updateInfura(),\n        2000\n    );\n  }\n\n  updateInfura() {\n      return web3.eth.getBlockNumber()\n          .then((resp) => {\n            let difference   = this.state.finalBlockNumber - resp;\n            let timeToFork   = difference * 15;\n            let forkDuration = new Moment.duration(timeToFork, 's');\n            let currentTime  = new Moment();\n            this.setState({\n              blockNumber: resp,\n              forkDate:    currentTime.add(timeToFork, 'seconds').format('YYYY-MM-DD'),\n              days:        forkDuration.days(),\n              hours:       forkDuration.hours(),\n              minutes:     forkDuration.minutes()\n            })\n          });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"container\">\n            <h1 className=\"thinFont center-align orange-text\">Constantinople Fork</h1>\n            <h1 className=\"thinFont center-align\"><span id=\"currentBlock\" className=\"groundhog-green text-accent-2 smallScreen orange-text\">{this.state.blockNumber.toLocaleString()}</span> / <span id=\"forkBlock\" className=\"orange-text smallScreen\">{this.state.finalBlockNumber.toLocaleString()}</span><span >&nbsp;&nbsp;Blocks&nbsp;</span></h1>\n            <h2 className=\"thinFont center-align orange-text\">~\n                <span className=\"center-align groundhog-green\">{this.state.days}</span><span className=\"center-align\"> Days </span>\n                <span className=\"center-align groundhog-green\">{this.state.hours}</span><span className=\"center-align\"> Hours </span>\n                <span className=\"center-align groundhog-green\">{this.state.minutes}</span><span className=\"center-align\"> Minutes</span>\n            </h2>\n            <h3>~ {this.state.forkDate}</h3>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}